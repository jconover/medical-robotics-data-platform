AWSTemplateFormatVersion: '2010-09-09'
Description: 'Medical Robotics Data Platform - Application Load Balancer'

Parameters:
  EnvironmentName:
    Description: Environment name prefix for resources
    Type: String
    Default: medrobotics
    AllowedPattern: '[a-z0-9-]+'

Resources:
  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${EnvironmentName}-alb'
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      Subnets:
        - Fn::ImportValue: !Sub '${EnvironmentName}-public-subnet-1'
        - Fn::ImportValue: !Sub '${EnvironmentName}-public-subnet-2'
      SecurityGroups:
        - Fn::ImportValue: !Sub '${EnvironmentName}-alb-sg-id'
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-alb'
        - Key: Project
          Value: medical-robotics-data-platform

  # Target Group for API Service
  APITargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${EnvironmentName}-api-tg'
      Port: 5000
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue: !Sub '${EnvironmentName}-vpc-id'
      HealthCheckEnabled: true
      HealthCheckProtocol: HTTP
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 200
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-api-tg'
        - Key: Project
          Value: medical-robotics-data-platform

  # Target Group for Data Ingestion Service
  DataIngestionTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${EnvironmentName}-ingestion-tg'
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue: !Sub '${EnvironmentName}-vpc-id'
      HealthCheckEnabled: true
      HealthCheckProtocol: HTTP
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 200
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-ingestion-tg'
        - Key: Project
          Value: medical-robotics-data-platform

  # HTTP Listener (redirects to HTTPS in production)
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref APITargetGroup

  # Listener Rule for API Service
  APIListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HTTPListener
      Priority: 10
      Conditions:
        - Field: path-pattern
          Values:
            - /api/*
      Actions:
        - Type: forward
          TargetGroupArn: !Ref APITargetGroup

  # Listener Rule for Data Ingestion
  DataIngestionListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HTTPListener
      Priority: 20
      Conditions:
        - Field: path-pattern
          Values:
            - /ingest/*
      Actions:
        - Type: forward
          TargetGroupArn: !Ref DataIngestionTargetGroup

Outputs:
  LoadBalancerArn:
    Description: ARN of the Application Load Balancer
    Value: !Ref ApplicationLoadBalancer
    Export:
      Name: !Sub '${EnvironmentName}-alb-arn'

  LoadBalancerDNS:
    Description: DNS name of the Application Load Balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub '${EnvironmentName}-alb-dns'

  LoadBalancerURL:
    Description: URL of the Application Load Balancer
    Value: !Sub 'http://${ApplicationLoadBalancer.DNSName}'

  HTTPListenerArn:
    Description: ARN of the HTTP Listener
    Value: !Ref HTTPListener
    Export:
      Name: !Sub '${EnvironmentName}-alb-listener-arn'

  APITargetGroupArn:
    Description: ARN of the API Target Group
    Value: !Ref APITargetGroup
    Export:
      Name: !Sub '${EnvironmentName}-api-target-group-arn'

  DataIngestionTargetGroupArn:
    Description: ARN of the Data Ingestion Target Group
    Value: !Ref DataIngestionTargetGroup
    Export:
      Name: !Sub '${EnvironmentName}-ingestion-target-group-arn'
